package manager_test

import (
	"errors"
	"fmt"
	"time"

	"code.cloudfoundry.org/clock/fakeclock"

	"bosh-dns/dns/manager"

	boshsysfakes "github.com/cloudfoundry/bosh-utils/system/fakes"
	. "github.com/onsi/ginkgo"
	. "github.com/onsi/gomega"
)

var _ = Describe("ResolvConfManager", func() {
	var (
		dnsManager    manager.DNSManager
		address       string
		fs            *boshsysfakes.FakeFileSystem
		clock         *fakeclock.FakeClock
		fakeCmdRunner *boshsysfakes.FakeCmdRunner
	)

	BeforeEach(func() {
		clock = fakeclock.NewFakeClock(time.Now())
		address = "192.0.2.100"
		fakeCmdRunner = boshsysfakes.NewFakeCmdRunner()
		fs = boshsysfakes.NewFakeFileSystem()
		dnsManager = manager.NewResolvConfManager(address, clock, fs, fakeCmdRunner)
	})

	Describe("Read", func() {
		Context("When resolv.conf is empty", func() {
			BeforeEach(func() {
				_ = fs.WriteFile("/etc/resolv.conf", []byte(""))
			})

			It("returns an empty array", func() {
				nameservers, err := dnsManager.Read()

				Expect(err).ToNot(HaveOccurred())
				Expect(nameservers).To(HaveLen(0))
			})
		})

		Context("When resolv.conf has multiple nameservers", func() {
			BeforeEach(func() {
				_ = fs.WriteFile("/etc/resolv.conf", []byte(fmt.Sprintf(`
# Generated by dhcpcd from eth0.dhcp
# /etc/resolv.conf.head can replace this line
domain sf.pivotallabs.com
search sf.pivotallabs.com pivotallabs.com
nameserver ns-1
nameserver ns-2
# /etc/resolv.conf.tail can replace this line
`)))
			})

			It("returns all entries", func() {
				nameservers, err := dnsManager.Read()

				Expect(err).ToNot(HaveOccurred())
				Expect(nameservers).To(HaveLen(2))
				Expect(nameservers).To(ConsistOf("ns-1", "ns-2"))
			})

			Context("When there are malformed entries", func() {
				Context("nameserver is missing a value", func() {
					BeforeEach(func() {
						_ = fs.WriteFile("/etc/resolv.conf", []byte(fmt.Sprintf(`
# Generated by dhcpcd from eth0.dhcp
# /etc/resolv.conf.head can replace this line
domain sf.pivotallabs.com
search sf.pivotallabs.com pivotallabs.com
nameserver ns-1
nameserver
# /etc/resolv.conf.tail can replace this line
`)))
					})

					It("returns all complete entries", func() {
						nameservers, err := dnsManager.Read()

						Expect(err).ToNot(HaveOccurred())
						Expect(nameservers).To(HaveLen(1))
						Expect(nameservers).To(ConsistOf("ns-1"))
					})
				})

				Context("nameserver entry has spaces or other text before 'nameserver'", func() {
					BeforeEach(func() {
						_ = fs.WriteFile("/etc/resolv.conf", []byte(fmt.Sprintf(`
# Generated by dhcpcd from eth0.dhcp
# /etc/resolv.conf.head can replace this line
domain sf.pivotallabs.com
search sf.pivotallabs.com pivotallabs.com
 nameserver   ns-1
nameserver ns-2
1 nameserver foo
# /etc/resolv.conf.tail can replace this line
`)))
					})

					It("returns all entries", func() {
						nameservers, err := dnsManager.Read()

						Expect(fs.ReadFileWithOptsCallCount).To(Equal(1))

						Expect(err).ToNot(HaveOccurred())
						Expect(nameservers).To(HaveLen(2))
						Expect(nameservers).To(ConsistOf("ns-1", "ns-2"))
					})
				})
			})
		})

		Context("When resolv.conf is not readable", func() {
			BeforeEach(func() {
				_ = fs.WriteFile("/etc/resolv.conf", []byte(""))
				fs.RegisterReadFileError("/etc/resolv.conf", errors.New("unable to read /etc/resolv.conf"))
			})

			It("returns an error", func() {
				_, err := dnsManager.Read()
				Expect(err).To(HaveOccurred())
				Expect(err.Error()).To(ContainSubstring("attempting to read dns nameservers"))
			})
		})
	})
})
