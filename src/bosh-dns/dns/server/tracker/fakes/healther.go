// Code generated by counterfeiter. DO NOT EDIT.
package fakes

import (
	"sync"
)

type Healther struct {
	TrackStub        func(ip string)
	trackMutex       sync.RWMutex
	trackArgsForCall []struct {
		ip string
	}
	UntrackStub        func(ip string)
	untrackMutex       sync.RWMutex
	untrackArgsForCall []struct {
		ip string
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *Healther) Track(ip string) {
	fake.trackMutex.Lock()
	fake.trackArgsForCall = append(fake.trackArgsForCall, struct {
		ip string
	}{ip})
	fake.recordInvocation("Track", []interface{}{ip})
	fake.trackMutex.Unlock()
	if fake.TrackStub != nil {
		fake.TrackStub(ip)
	}
}

func (fake *Healther) TrackCallCount() int {
	fake.trackMutex.RLock()
	defer fake.trackMutex.RUnlock()
	return len(fake.trackArgsForCall)
}

func (fake *Healther) TrackArgsForCall(i int) string {
	fake.trackMutex.RLock()
	defer fake.trackMutex.RUnlock()
	return fake.trackArgsForCall[i].ip
}

func (fake *Healther) Untrack(ip string) {
	fake.untrackMutex.Lock()
	fake.untrackArgsForCall = append(fake.untrackArgsForCall, struct {
		ip string
	}{ip})
	fake.recordInvocation("Untrack", []interface{}{ip})
	fake.untrackMutex.Unlock()
	if fake.UntrackStub != nil {
		fake.UntrackStub(ip)
	}
}

func (fake *Healther) UntrackCallCount() int {
	fake.untrackMutex.RLock()
	defer fake.untrackMutex.RUnlock()
	return len(fake.untrackArgsForCall)
}

func (fake *Healther) UntrackArgsForCall(i int) string {
	fake.untrackMutex.RLock()
	defer fake.untrackMutex.RUnlock()
	return fake.untrackArgsForCall[i].ip
}

func (fake *Healther) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.trackMutex.RLock()
	defer fake.trackMutex.RUnlock()
	fake.untrackMutex.RLock()
	defer fake.untrackMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *Healther) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}
