// Code generated by counterfeiter. DO NOT EDIT.
package recordsfakes

import (
	"bosh-dns/dns/server/record"
	"bosh-dns/dns/server/records"
	"sync"
)

type FakeFiltererFactory struct {
	NewFiltererStub        func(chan record.Host, bool) records.Filterer
	newFiltererMutex       sync.RWMutex
	newFiltererArgsForCall []struct {
		arg1 chan record.Host
		arg2 bool
	}
	newFiltererReturns struct {
		result1 records.Filterer
	}
	newFiltererReturnsOnCall map[int]struct {
		result1 records.Filterer
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeFiltererFactory) NewFilterer(arg1 chan record.Host, arg2 bool) records.Filterer {
	fake.newFiltererMutex.Lock()
	ret, specificReturn := fake.newFiltererReturnsOnCall[len(fake.newFiltererArgsForCall)]
	fake.newFiltererArgsForCall = append(fake.newFiltererArgsForCall, struct {
		arg1 chan record.Host
		arg2 bool
	}{arg1, arg2})
	fake.recordInvocation("NewFilterer", []interface{}{arg1, arg2})
	fake.newFiltererMutex.Unlock()
	if fake.NewFiltererStub != nil {
		return fake.NewFiltererStub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.newFiltererReturns
	return fakeReturns.result1
}

func (fake *FakeFiltererFactory) NewFiltererCallCount() int {
	fake.newFiltererMutex.RLock()
	defer fake.newFiltererMutex.RUnlock()
	return len(fake.newFiltererArgsForCall)
}

func (fake *FakeFiltererFactory) NewFiltererCalls(stub func(chan record.Host, bool) records.Filterer) {
	fake.newFiltererMutex.Lock()
	defer fake.newFiltererMutex.Unlock()
	fake.NewFiltererStub = stub
}

func (fake *FakeFiltererFactory) NewFiltererArgsForCall(i int) (chan record.Host, bool) {
	fake.newFiltererMutex.RLock()
	defer fake.newFiltererMutex.RUnlock()
	argsForCall := fake.newFiltererArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeFiltererFactory) NewFiltererReturns(result1 records.Filterer) {
	fake.newFiltererMutex.Lock()
	defer fake.newFiltererMutex.Unlock()
	fake.NewFiltererStub = nil
	fake.newFiltererReturns = struct {
		result1 records.Filterer
	}{result1}
}

func (fake *FakeFiltererFactory) NewFiltererReturnsOnCall(i int, result1 records.Filterer) {
	fake.newFiltererMutex.Lock()
	defer fake.newFiltererMutex.Unlock()
	fake.NewFiltererStub = nil
	if fake.newFiltererReturnsOnCall == nil {
		fake.newFiltererReturnsOnCall = make(map[int]struct {
			result1 records.Filterer
		})
	}
	fake.newFiltererReturnsOnCall[i] = struct {
		result1 records.Filterer
	}{result1}
}

func (fake *FakeFiltererFactory) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.newFiltererMutex.RLock()
	defer fake.newFiltererMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeFiltererFactory) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ records.FiltererFactory = new(FakeFiltererFactory)
