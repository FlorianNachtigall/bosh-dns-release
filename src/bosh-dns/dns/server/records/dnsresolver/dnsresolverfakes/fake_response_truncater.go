// Code generated by counterfeiter. DO NOT EDIT.
package dnsresolverfakes

import (
	"bosh-dns/dns/server/records/dnsresolver"
	"sync"

	"github.com/miekg/dns"
)

type FakeResponseTruncater struct {
	TruncateIfNeededStub        func(dns.ResponseWriter, *dns.Msg, *dns.Msg)
	truncateIfNeededMutex       sync.RWMutex
	truncateIfNeededArgsForCall []struct {
		arg1 dns.ResponseWriter
		arg2 *dns.Msg
		arg3 *dns.Msg
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeResponseTruncater) TruncateIfNeeded(arg1 dns.ResponseWriter, arg2 *dns.Msg, arg3 *dns.Msg) {
	fake.truncateIfNeededMutex.Lock()
	fake.truncateIfNeededArgsForCall = append(fake.truncateIfNeededArgsForCall, struct {
		arg1 dns.ResponseWriter
		arg2 *dns.Msg
		arg3 *dns.Msg
	}{arg1, arg2, arg3})
	fake.recordInvocation("TruncateIfNeeded", []interface{}{arg1, arg2, arg3})
	fake.truncateIfNeededMutex.Unlock()
	if fake.TruncateIfNeededStub != nil {
		fake.TruncateIfNeededStub(arg1, arg2, arg3)
	}
}

func (fake *FakeResponseTruncater) TruncateIfNeededCallCount() int {
	fake.truncateIfNeededMutex.RLock()
	defer fake.truncateIfNeededMutex.RUnlock()
	return len(fake.truncateIfNeededArgsForCall)
}

func (fake *FakeResponseTruncater) TruncateIfNeededCalls(stub func(dns.ResponseWriter, *dns.Msg, *dns.Msg)) {
	fake.truncateIfNeededMutex.Lock()
	defer fake.truncateIfNeededMutex.Unlock()
	fake.TruncateIfNeededStub = stub
}

func (fake *FakeResponseTruncater) TruncateIfNeededArgsForCall(i int) (dns.ResponseWriter, *dns.Msg, *dns.Msg) {
	fake.truncateIfNeededMutex.RLock()
	defer fake.truncateIfNeededMutex.RUnlock()
	argsForCall := fake.truncateIfNeededArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeResponseTruncater) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.truncateIfNeededMutex.RLock()
	defer fake.truncateIfNeededMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeResponseTruncater) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ dnsresolver.ResponseTruncater = new(FakeResponseTruncater)
