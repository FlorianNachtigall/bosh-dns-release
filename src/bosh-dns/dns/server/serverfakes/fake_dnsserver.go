// Code generated by counterfeiter. DO NOT EDIT.
package serverfakes

import (
	"bosh-dns/dns/server"
	"context"
	"sync"
)

type FakeDNSServer struct {
	ListenAndServeStub        func() error
	listenAndServeMutex       sync.RWMutex
	listenAndServeArgsForCall []struct {
	}
	listenAndServeReturns struct {
		result1 error
	}
	listenAndServeReturnsOnCall map[int]struct {
		result1 error
	}
	ShutdownStub        func(context.Context) error
	shutdownMutex       sync.RWMutex
	shutdownArgsForCall []struct {
		arg1 context.Context
	}
	shutdownReturns struct {
		result1 error
	}
	shutdownReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeDNSServer) ListenAndServe() error {
	fake.listenAndServeMutex.Lock()
	ret, specificReturn := fake.listenAndServeReturnsOnCall[len(fake.listenAndServeArgsForCall)]
	fake.listenAndServeArgsForCall = append(fake.listenAndServeArgsForCall, struct {
	}{})
	fake.recordInvocation("ListenAndServe", []interface{}{})
	fake.listenAndServeMutex.Unlock()
	if fake.ListenAndServeStub != nil {
		return fake.ListenAndServeStub()
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.listenAndServeReturns
	return fakeReturns.result1
}

func (fake *FakeDNSServer) ListenAndServeCallCount() int {
	fake.listenAndServeMutex.RLock()
	defer fake.listenAndServeMutex.RUnlock()
	return len(fake.listenAndServeArgsForCall)
}

func (fake *FakeDNSServer) ListenAndServeCalls(stub func() error) {
	fake.listenAndServeMutex.Lock()
	defer fake.listenAndServeMutex.Unlock()
	fake.ListenAndServeStub = stub
}

func (fake *FakeDNSServer) ListenAndServeReturns(result1 error) {
	fake.listenAndServeMutex.Lock()
	defer fake.listenAndServeMutex.Unlock()
	fake.ListenAndServeStub = nil
	fake.listenAndServeReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeDNSServer) ListenAndServeReturnsOnCall(i int, result1 error) {
	fake.listenAndServeMutex.Lock()
	defer fake.listenAndServeMutex.Unlock()
	fake.ListenAndServeStub = nil
	if fake.listenAndServeReturnsOnCall == nil {
		fake.listenAndServeReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.listenAndServeReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeDNSServer) Shutdown(arg1 context.Context) error {
	fake.shutdownMutex.Lock()
	ret, specificReturn := fake.shutdownReturnsOnCall[len(fake.shutdownArgsForCall)]
	fake.shutdownArgsForCall = append(fake.shutdownArgsForCall, struct {
		arg1 context.Context
	}{arg1})
	fake.recordInvocation("Shutdown", []interface{}{arg1})
	fake.shutdownMutex.Unlock()
	if fake.ShutdownStub != nil {
		return fake.ShutdownStub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.shutdownReturns
	return fakeReturns.result1
}

func (fake *FakeDNSServer) ShutdownCallCount() int {
	fake.shutdownMutex.RLock()
	defer fake.shutdownMutex.RUnlock()
	return len(fake.shutdownArgsForCall)
}

func (fake *FakeDNSServer) ShutdownCalls(stub func(context.Context) error) {
	fake.shutdownMutex.Lock()
	defer fake.shutdownMutex.Unlock()
	fake.ShutdownStub = stub
}

func (fake *FakeDNSServer) ShutdownArgsForCall(i int) context.Context {
	fake.shutdownMutex.RLock()
	defer fake.shutdownMutex.RUnlock()
	argsForCall := fake.shutdownArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeDNSServer) ShutdownReturns(result1 error) {
	fake.shutdownMutex.Lock()
	defer fake.shutdownMutex.Unlock()
	fake.ShutdownStub = nil
	fake.shutdownReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeDNSServer) ShutdownReturnsOnCall(i int, result1 error) {
	fake.shutdownMutex.Lock()
	defer fake.shutdownMutex.Unlock()
	fake.ShutdownStub = nil
	if fake.shutdownReturnsOnCall == nil {
		fake.shutdownReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.shutdownReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeDNSServer) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.listenAndServeMutex.RLock()
	defer fake.listenAndServeMutex.RUnlock()
	fake.shutdownMutex.RLock()
	defer fake.shutdownMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeDNSServer) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ server.DNSServer = new(FakeDNSServer)
